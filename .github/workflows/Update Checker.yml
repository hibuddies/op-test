name: Update Checker

env:
  REPO_URL_LEDE: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  REPO_URL_SSRPLUS: https://github.com/fw876/helloworld
  REPO_URL_PASSWALL: https://github.com/xiaorouji/openwrt-passwall
  REPO_BRANCH_PASSWALL: main
  REPO_URL_VSSR: https://github.com/jerrykuku/luci-app-vssr
  REPO_URL_BYPASS: https://github.com/garypang13/luci-app-bypass
  REPO_BRANCH_BYPASS: main
  REPO_URL_OPENCLASH: https://github.com/vernesong/OpenClash

on:
  workflow_dispatch:
  schedule:
    - cron: 30 */1 * * *

jobs:
  lede:
    runs-on: ubuntu-latest

    steps:

    - name: Get Commit Hash
      id: getHash
      run: |
        git clone --depth 1 $REPO_URL_LEDE -b $REPO_BRANCH .
        echo "::set-output name=commitHash::$(git rev-parse HEAD)"

    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@v2
      with:
        path: .commitHash
        key: HEAD-${{ steps.getHash.outputs.commitHash }}

    - name: Save New Commit Hash
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.getHash.outputs.commitHash }} | tee .commitHash

#    - name: Trigger build
#      if: steps.cacheHash.outputs.cache-hit != 'true'
#      uses: peter-evans/repository-dispatch@v1
#      with:
#        token: ${{ secrets.RELEASES_TOKEN }}
#        event-type: lede Source Code Update

    - name: Source Code Update notification
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=${{ env.FILE_NAME }}lede源码更新了" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 1



  ssrplus:
    runs-on: ubuntu-latest

    steps:

    - name: Get Commit Hash
      id: getHash
      run: |
        git clone --depth 1 $REPO_URL_SSRPLUS -b $REPO_BRANCH .
        echo "::set-output name=commitHash::$(git rev-parse HEAD)"

    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@v2
      with:
        path: .commitHash
        key: HEAD-${{ steps.getHash.outputs.commitHash }}

    - name: Save New Commit Hash
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.getHash.outputs.commitHash }} | tee .commitHash

#    - name: Trigger build
#      if: steps.cacheHash.outputs.cache-hit != 'true'
#      uses: peter-evans/repository-dispatch@v1
#      with:
#        token: ${{ secrets.RELEASES_TOKEN }}
#        event-type: lede Source Code Update

    - name: Source Code Update notification
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=${{ env.FILE_NAME }}ssrplus源码更新了" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"



  passwall:
    runs-on: ubuntu-latest

    steps:

    - name: Get Commit Hash
      id: getHash
      run: |
        git clone --depth 1 $REPO_URL_PASSWALL -b $REPO_BRANCH_PASSWALL .
        echo "::set-output name=commitHash::$(git rev-parse HEAD)"

    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@v2
      with:
        path: .commitHash
        key: HEAD-${{ steps.getHash.outputs.commitHash }}

    - name: Save New Commit Hash
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.getHash.outputs.commitHash }} | tee .commitHash

#    - name: Trigger build
#      if: steps.cacheHash.outputs.cache-hit != 'true'
#      uses: peter-evans/repository-dispatch@v1
#      with:
#        token: ${{ secrets.RELEASES_TOKEN }}
#        event-type: lede Source Code Update

    - name: Source Code Update notification
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=${{ env.FILE_NAME }}passwall源码更新了" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"



  vssr:
    runs-on: ubuntu-latest

    steps:

    - name: Get Commit Hash
      id: getHash
      run: |
        git clone --depth 1 $REPO_URL_VSSR -b $REPO_BRANCH .
        echo "::set-output name=commitHash::$(git rev-parse HEAD)"

    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@v2
      with:
        path: .commitHash
        key: HEAD-${{ steps.getHash.outputs.commitHash }}

    - name: Save New Commit Hash
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.getHash.outputs.commitHash }} | tee .commitHash

#    - name: Trigger build
#      if: steps.cacheHash.outputs.cache-hit != 'true'
#      uses: peter-evans/repository-dispatch@v1
#      with:
#        token: ${{ secrets.RELEASES_TOKEN }}
#        event-type: lede Source Code Update

    - name: Source Code Update notification
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=${{ env.FILE_NAME }}vssr源码更新了" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"



  bypass:
    runs-on: ubuntu-latest

    steps:

    - name: Get Commit Hash
      id: getHash
      run: |
        git clone --depth 1 $REPO_URL_BYPASS -b $REPO_BRANCH_BYPASS .
        echo "::set-output name=commitHash::$(git rev-parse HEAD)"

    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@v2
      with:
        path: .commitHash
        key: HEAD-${{ steps.getHash.outputs.commitHash }}

    - name: Save New Commit Hash
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.getHash.outputs.commitHash }} | tee .commitHash

#    - name: Trigger build
#      if: steps.cacheHash.outputs.cache-hit != 'true'
#      uses: peter-evans/repository-dispatch@v1
#      with:
#        token: ${{ secrets.RELEASES_TOKEN }}
#        event-type: lede Source Code Update

    - name: Source Code Update notification
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=${{ env.FILE_NAME }}bypass源码更新了" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"



  openclash:
    runs-on: ubuntu-latest

    steps:

    - name: Get Commit Hash
      id: getHash
      run: |
        git clone --depth 1 $REPO_URL_OPENCLASH -b $REPO_BRANCH .
        echo "::set-output name=commitHash::$(git rev-parse HEAD)"

    - name: Compare Commit Hash
      id: cacheHash
      uses: actions/cache@v2
      with:
        path: .commitHash
        key: HEAD-${{ steps.getHash.outputs.commitHash }}

    - name: Save New Commit Hash
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        echo ${{ steps.getHash.outputs.commitHash }} | tee .commitHash

#    - name: Trigger build
#      if: steps.cacheHash.outputs.cache-hit != 'true'
#      uses: peter-evans/repository-dispatch@v1
#      with:
#        token: ${{ secrets.RELEASES_TOKEN }}
#        event-type: lede Source Code Update

    - name: Source Code Update notification
      if: steps.cacheHash.outputs.cache-hit != 'true'
      run: |
        curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=${{ env.FILE_NAME }}openclash源码更新了" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"
