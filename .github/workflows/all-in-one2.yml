name: all-in-one2

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
 # schedule:
  #  - cron: 0 16 * * *

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: ARMv8/test.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  Update_Ver_SH: ARMv8/autoVersion.sh
  Get_Imgs_SH: ARMv8/getImgs.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: false
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  FILE_NAME: all-in-one
  PRODUCT_NAME: all-in-one

jobs:
  build:
    runs-on: ubuntu-18.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804)
        sudo -E apt-get -qq install rename
        sudo -E apt-get -qq install time
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        echo "mk_scr=${{ secrets.mk_scr }}"  >> $GITHUB_ENV
        #echo "a_beikeyun_sfe=${{ secrets.a_beikeyun_sfe }}"  >> $GITHUB_ENV
        echo "a_beikeyun_o=${{ secrets.a_beikeyun_o }}"  >> $GITHUB_ENV
        echo "a_s9xxx_sfe=${{ secrets.a_s9xxx_sfe }}"  >> $GITHUB_ENV
        echo "a_s9xxx_o=${{ secrets.a_s9xxx_o }}"  >> $GITHUB_ENV

    - name: 编译前硬盘容量
      if: (!cancelled())
      run: df -hT

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H")
        echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
        echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: add and cat cpufreq file
      run: |
        cd openwrt
        sed -i 's/LUCI_DEPENDS.*/LUCI_DEPENDS:=@TARGET_armvirt_64/g' package/lean/luci-app-cpufreq/Makefile
        cat package/lean/luci-app-cpufreq/Makefile

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

  #  - name: Check space usage
  #    if: (!cancelled())
  #    run: df -hT

    - name: Download and organize files
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd $GITHUB_WORKSPACE
        sudo mkdir -p /test
        sudo tar -zcvf AllPackages.tar.gz openwrt/bin/packages
        sudo cp AllPackages.tar.gz /test
        sudo cp openwrt/.config /test/test.config
        cd openwrt/bin/targets/*/*
        rm -rf packages sha256sums config.buildinfo feeds.buildinfo version.buildinfo openwrt-armvirt-64-default.manifest openwrt-armvirt-64-Image openwrt-armvirt-64-rootfs-ext4.img openwrt-armvirt-64-Image-initramfs openwrt-armvirt-64-rootfs-squashfs.img openwrt-armvirt-64-rootfs.cpio.gz
        cd /opt
        sudo rm -rf Armbian_*
        chmod +x $GITHUB_WORKSPACE/$Get_Imgs_SH
        sudo $GITHUB_WORKSPACE/$Get_Imgs_SH
        sudo tar xvzf *.tar.gz
        sudo mkdir imgs
        #sudo xz -d Armbian*Beike*\+\.img\.xz
        sudo xz -d Armbian*Beike*\+o*
        sudo xz -d Armbian*Aml*\+\.img\.xz
        sudo xz -d Armbian*Aml*\+o*
        #sudo xz -d Armbian*L1*\+\.img\.xz
        #sudo xz -d Armbian*L1*\+o*
        sudo mv *.img imgs
        cd /opt/openwrt
        sudo rm -rf openwrt-armvirt-64-* sfe-openwrt-armvirt-64-*
        sudo cp $GITHUB_WORKSPACE/openwrt/bin/targets/*/*/*.tar.gz openwrt-armvirt-64-default-rootfs.tar.gz
        sudo cp openwrt-armvirt-64-default-rootfs.tar.gz sfe-openwrt-armvirt-64-default-rootfs.tar.gz
        #sudo wget $dibao_sfe
        #sudo mv openwrt-armvirt-64-default-rootfs.tar.gz sfe-openwrt-armvirt-64-default-rootfs.tar.gz
        #sudo wget $dibao_o
        echo "::set-output name=status::success"

    - name: autoVersion
      run: |
        cd /opt/openwrt
        chmod +x $GITHUB_WORKSPACE/$Update_Ver_SH
        sudo $GITHUB_WORKSPACE/$Update_Ver_SH

    - name: Build firmware
      id: build
      run: |
        cd /opt/openwrt
        sudo chmod +x *.sh
        sudo ./mk_beikeyun_opimg.sh
        #sudo ./mk_l1pro_opimg.sh
        sudo ./mk_n1_opimg.sh
        #sudo ./mk_n1_opimg_sfe.sh
        sudo ./mk_s905x3_opimg.sh
        sudo ./mk_s905x3_opimg_sfe.sh
        #sudo ./mk_s922x_opimg.sh
        #sudo ./mk_s922x_opimg_sfe.sh
        #sudo ./n1-to-vplus.sh
        #sudo ./n1-to-vplus_sfe.sh
        echo "::set-output name=status::success"

    - name: copy update files
      run: |
        cd /opt/openwrt
        #sudo cp files/update-beikeyun-openwrt.sh /test/z-update-beikeyun-openwrt.sh
        #sudo cp files/update-l1pro-openwrt.sh /test/z-update-l1pro-openwrt.sh
        #sudo cp files/update-to-emmc.sh /test/z-update-to-emmc.sh
        #sudo cp files/s905x3/update-s905x3-openwrt.sh /test/z-update-s905x3-openwrt.sh
        #sudo cp files/s922x/update-s922x-openwrt.sh /test/z-update-s922x-openwrt.sh
        #sudo cp files/update-vplus-openwrt.sh /test/z-update-vplus-openwrt.sh

    - name: xz-z
      id: xz
      run: |
        sudo chmod  -R 777 /opt/openwrt/tmp
        cd /opt/openwrt/tmp
        sudo rm -rf *.xz
        #sudo xz -z *.img
        sudo rm btld-rk3328.bin
        echo "::set-output name=status::success"

    - name: cp and rm files
      run: |
        cd /opt/openwrt/tmp
        sudo cp *.img /test
        #sudo cp *.xz /test
        cd /opt
        sudo rm -rf openwrt
        sudo rm -rf imgs
        sudo rm -rf *.xz
        sudo rm -rf *.tar.gz
        ls -la
        cd /test
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV

    - name: Download and organize files1
      id: organize1
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd /opt
        sudo rm -rf Armbian_*
        wget $mk_scr
        #wget $a_beikeyun_sfe
        #wget $a_beikeyun_o
        wget $a_s9xxx_sfe
        #wget $a_s9xxx_o        
        sudo tar xvzf *.tar.gz
        sudo mkdir imgs
        #sudo xz -d Armbian*Beike*\+\.img\.xz
        #sudo xz -d Armbian*Beike*\+o*
        sudo xz -d Armbian*Aml*\+\.img\.xz
        #sudo xz -d Armbian*Aml*\+o*
        #sudo xz -d Armbian*L1*\+\.img\.xz
        #sudo xz -d Armbian*L1*\+o*
        sudo mv *.img imgs
        cd /opt/openwrt
        sudo rm -rf openwrt-armvirt-64-*
        sudo cp $GITHUB_WORKSPACE/openwrt/bin/targets/*/*/*.tar.gz sfe-openwrt-armvirt-64-default-rootfs.tar.gz
        #sudo wget $dibao_sfe
        #sudo mv openwrt-armvirt-64-default-rootfs.tar.gz sfe-openwrt-armvirt-64-default-rootfs.tar.gz
        #sudo wget $dibao_o
        echo "::set-output name=status::success"

    - name: autoVersion1
      run: |
        cd /opt/openwrt
        chmod +x $GITHUB_WORKSPACE/$Update_Ver_SH
        sudo $GITHUB_WORKSPACE/$Update_Ver_SH

    - name: Build firmware1
      id: build1
      run: |
        cd /opt/openwrt
        sudo chmod +x *.sh
        #sudo ./mk_beikeyun_opimg.sh
        #sudo ./mk_l1pro_opimg.sh
        #sudo ./mk_n1_opimg.sh
        sudo ./mk_n1_opimg_sfe.sh
        #sudo ./mk_s905x3_opimg.sh
        #sudo ./mk_s905x3_opimg_sfe.sh
        #sudo ./mk_s922x_opimg.sh
        #sudo ./mk_s922x_opimg_sfe.sh
        #sudo ./n1-to-vplus.sh
        #sudo ./n1-to-vplus_sfe.sh
        echo "::set-output name=status::success"

    - name: xz-z1
      id: xz1
      run: |
        sudo chmod  -R 777 /opt/openwrt/tmp
        cd /opt/openwrt/tmp
        sudo rm -rf *.xz
        #sudo xz -z *.img
        #sudo rm btld-rk3328.bin
        sudo cp *.img /test
        #sudo cp *.xz /test
        cd /test
        #sudo xz -z *.img
        echo "::set-output name=status::success"

    - name: Check Files
      run: |
        cd /test
        ls

    - name: 编译后硬盘容量
      if: (!cancelled())
      run: df -hT

    - name: Create release
      id: release
      uses: ncipollo/release-action@v1
      with:
        name: ${{ env.DATE }} all-in-one
        allowUpdates: true
        tag: ${{ env.FILE_NAME }}
        commit: main
        token: ${{ secrets.RELEASES_TOKEN }}
        body: |
          默认IP：192.168.1.1 默认密码： password
          Openwrt🚀(注:+o版为flowoffload加速,+版为sfe加速)
          贝壳云和S905×3在线升级方法：
             1. 贝壳云：cd /mnt/mmcblk0p4
               S903×3：cd /mnt/mmcblk2p4
             2. wget 升级脚本链接
             3. wget 固件链接
             4. chmod +x *.sh
             5. ./升级脚本名字 img固件名
        artifacts: ${{ env.FIRMWARE }}/*

    - name: Telegram notification
      if: steps.xz1.outputs.status == 'success' && !cancelled()
      run: curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=${{ env.FILE_NAME }}编译完成" "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage"
