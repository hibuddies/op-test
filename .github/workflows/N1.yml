name: N1

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      days:
        description: 'Number of days.'
        required: true
        default: 60
      minimum_runs:
        description: 'The minimum runs to keep for each workflow.'
        required: true
        default: 6
  schedule:
    - cron: 0 23 * * *

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: ARMv8/gdq-sfe.config
  DIY_P1_SH: diy-part1.sh
  DIY_P2_SH: diy-part2.sh
  Update_Ver_SH: ARMv8/autoVersion.sh
  Get_Imgs_SH: ARMv8/getImgs.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: false
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  TZ: Asia/Shanghai
  FILE_NAME: N1
 # PRODUCT_NAME: N1

jobs:

  gdq: #高大全版
    runs-on: ubuntu-18.04
    steps:    
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804)
        sudo -E apt-get -qq install rename
        sudo -E apt-get -qq install time
        sudo -E apt-get -qq install sshpass
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        echo "dibao_sfe=${{ secrets.dibao_gdq_sfe }}"  >> $GITHUB_ENV
        echo "dibao_o=${{ secrets.dibao_gdq_o }}"  >> $GITHUB_ENV
        echo "getimgs=${{ secrets.getimgs }}"  >> $GITHUB_ENV

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H")
        echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
        echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "DATE1=$(date "+%Y-%m-%d")" >> $GITHUB_ENV
#        echo "::set-env name=useVersionInfo::$useVersionInfo"
#        echo "::set-env name=DATE::$(date "+%Y-%m-%d %H:%M:%S")"

    - name: Download and organize files
      #if: steps.opwenwrtcache.outputs.cache-hit != 'true'
      run: |
        cd /opt
        sudo rm -rf Armbian_*
        sudo wget -P $GITHUB_WORKSPACE/ARMv8 $getimgs
        sudo chmod +x $GITHUB_WORKSPACE/$Get_Imgs_SH
        sudo $GITHUB_WORKSPACE/$Get_Imgs_SH
        sudo tar xvzf *.tar.gz
        sudo mkdir imgs
        #sudo xz -d Armbian*Beike*\+\.img\.xz
        #sudo xz -d Armbian*Beike*\+o*
        #sudo xz -d Armbian*Aml*\+\.img\.xz
        sudo xz -d Armbian*Aml*\+o*
        #sudo xz -d Armbian*L1*\+\.img\.xz
        #sudo xz -d Armbian*L1*\+o*
        sudo mv *.img imgs
        cd /opt/openwrt
        sudo mkdir sfe && cd sfe
        sudo rm -rf openwrt-armvirt-64-*
        sudo wget $dibao_sfe
        cd ..
        sudo mkdir flowoffload && cd flowoffload
        sudo rm -rf openwrt-armvirt-64-*
        sudo wget $dibao_o

    - name: autoVersion
      run: |
        cd /opt/openwrt
        chmod +x $GITHUB_WORKSPACE/$Update_Ver_SH
        sudo $GITHUB_WORKSPACE/$Update_Ver_SH

    - name: Check Files1
      run: |
        cd /opt/imgs
        ls

    - name: Check Files2
      run: |
        cd /opt/openwrt
        ls

    - name: Build firmware
      id: build
      run: |
        cd /opt/openwrt
        sudo chmod +x *.sh
        sudo ./mk_n1_opimg.sh
        #sudo ./mk_n1_opimg_sfe.sh
        echo "::set-output name=status::success"

    - name: copy update files
      run: |
        cd /opt/openwrt
        #sudo cp files/update-beikeyun-openwrt.sh tmp/z-update-beikeyun-openwrt.sh
        #sudo cp files/update-l1pro-openwrt.sh tmp/z-update-l1pro-openwrt.sh
        sudo cp files/update-to-emmc.sh tmp/z-update-to-emmc.sh
        #sudo cp files/s905x3/update-s905x3-openwrt.sh tmp/z-update-s905x3-openwrt.sh
        #sudo cp files/s922x/update-s922x-openwrt.sh tmp/z-update-s922x-openwrt.sh
        #sudo cp files/update-vplus-openwrt.sh tmp/z-update-vplus-openwrt.sh

    - name: Check Files3
      run: |
        cd /opt/openwrt/tmp
        rename 's/N1/${{ env.DATE1 }}-gdq-N1/' N1*img
        ls

    - name: xz-z
      id: xz
      run: |
        sudo chmod  -R 777 /opt/openwrt/tmp
        cd /opt/openwrt/tmp
        sudo rm -rf *.xz
        #sudo rm N1_*\+.*
        sudo xz -z *.img
        #sudo rm N1_*\+o.img
        #sudo rm btld-rk3328.bin
        #rename 's/N1/${{ env.DATE1 }}-gdq-N1/' N1*xz
        wget https://github.com/hibuddies/openwrt/releases/download/ARMv8-gdq-sfe/AllPackages.tar.gz
        rename 's/All/1-All/' All*gz
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Check Files4
      run: |
        cd /opt/openwrt/tmp
        ls

    - name: Create release
      id: release
      uses: ncipollo/release-action@v1
      with:
        name: ${{ env.DATE }} Openwrt for N1
        allowUpdates: true
        tag: ${{ env.FILE_NAME }}
        commit: main
        token: ${{ secrets.RELEASES_TOKEN }}
        body: |
          ## 鉴于N1用户群庞大，特单独开此release
          默认IP：192.168.1.1 默认密码： password
          Openwrt🚀(注:+o版为flowoffload加速,+版为sfe加速)
        artifacts: ${{ env.FIRMWARE }}/*



  mini: #精简版
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804)
        sudo -E apt-get -qq install rename
        sudo -E apt-get -qq install time
        sudo -E apt-get -qq install sshpass
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        echo "dibao_sfe=${{ secrets.dibao_mini_sfe }}"  >> $GITHUB_ENV
        echo "dibao_o=${{ secrets.dibao_mini_o }}"  >> $GITHUB_ENV
        echo "getimgs=${{ secrets.getimgs }}"  >> $GITHUB_ENV

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H")
        echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
        echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "DATE1=$(date "+%Y-%m-%d")" >> $GITHUB_ENV
#        echo "::set-env name=useVersionInfo::$useVersionInfo"
#        echo "::set-env name=DATE::$(date "+%Y-%m-%d %H:%M:%S")"

    - name: Download and organize files
      #if: steps.opwenwrtcache.outputs.cache-hit != 'true'
      run: |
        cd /opt
        sudo rm -rf Armbian_*
        sudo wget -P $GITHUB_WORKSPACE/ARMv8 $getimgs
        sudo chmod +x $GITHUB_WORKSPACE/$Get_Imgs_SH
        sudo $GITHUB_WORKSPACE/$Get_Imgs_SH
        sudo tar xvzf *.tar.gz
        sudo mkdir imgs
        #sudo xz -d Armbian*Beike*\+\.img\.xz
        #sudo xz -d Armbian*Beike*\+o*
        #sudo xz -d Armbian*Aml*\+\.img\.xz
        sudo xz -d Armbian*Aml*\+o*
        #sudo xz -d Armbian*L1*\+\.img\.xz
        #sudo xz -d Armbian*L1*\+o*
        sudo mv *.img imgs
        cd /opt/openwrt
        sudo mkdir sfe && cd sfe
        sudo rm -rf openwrt-armvirt-64-*
        sudo wget $dibao_sfe
        cd ..
        sudo mkdir flowoffload && cd flowoffload
        sudo rm -rf openwrt-armvirt-64-*
        sudo wget $dibao_o

    - name: autoVersion
      run: |
        cd /opt/openwrt
        chmod +x $GITHUB_WORKSPACE/$Update_Ver_SH
        sudo $GITHUB_WORKSPACE/$Update_Ver_SH

    - name: Check Files1
      run: |
        cd /opt/imgs
        ls

    - name: Check Files2
      run: |
        cd /opt/openwrt
        ls

    - name: Build firmware
      id: build
      run: |
        cd /opt/openwrt
        sudo chmod +x *.sh
        sudo ./mk_n1_opimg.sh
        #sudo ./mk_n1_opimg_sfe.sh
        echo "::set-output name=status::success"

    - name: copy update files
      run: |
        cd /opt/openwrt
        #sudo cp files/update-beikeyun-openwrt.sh tmp/z-update-beikeyun-openwrt.sh
        #sudo cp files/update-l1pro-openwrt.sh tmp/z-update-l1pro-openwrt.sh
        #sudo cp files/update-to-emmc.sh tmp/z-update-to-emmc.sh
        #sudo cp files/s905x3/update-s905x3-openwrt.sh tmp/z-update-s905x3-openwrt.sh
        #sudo cp files/s922x/update-s922x-openwrt.sh tmp/z-update-s922x-openwrt.sh
        #sudo cp files/update-vplus-openwrt.sh tmp/z-update-vplus-openwrt.sh

    - name: Check Files3
      run: |
        cd /opt/openwrt/tmp
        rename 's/N1/${{ env.DATE1 }}-mini-N1/' N1*img
        ls

    - name: xz-z
      id: xz
      run: |
        sudo chmod  -R 777 /opt/openwrt/tmp
        cd /opt/openwrt/tmp
        sudo rm -rf *.xz
        #sudo rm N1_*\+.*
        sudo xz -z *.img
        #sudo rm N1_*\+o.img
        #sudo rm btld-rk3328.bin
        #rename 's/N1/${{ env.DATE1 }}-mini-N1/' N1*xz
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Check Files4
      run: |
        cd /opt/openwrt/tmp
        ls

    - name: Create release
      id: release
      uses: ncipollo/release-action@v1
      with:
        name: ${{ env.DATE }} Openwrt for N1
        allowUpdates: true
        tag: ${{ env.FILE_NAME }}
        commit: main
        token: ${{ secrets.RELEASES_TOKEN }}
        body: |
          ## 鉴于N1用户群庞大，特单独开此release
          默认IP：192.168.1.1 默认密码： password
          Openwrt🚀(注:+o版为flowoffload加速,+版为sfe加速)
        artifacts: ${{ env.FIRMWARE }}/*



  gdq50: 
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804)
        sudo -E apt-get -qq install rename
        sudo -E apt-get -qq install time
        sudo -E apt-get -qq install sshpass
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        echo "mk_scr=${{ secrets.mk_scr }}"  >> $GITHUB_ENV
        #echo "a_beikeyun_sfe=${{ secrets.a_beikeyun_sfe }}"  >> $GITHUB_ENV
        echo "a_beikeyun_o=${{ secrets.a_beikeyun_o }}"  >> $GITHUB_ENV
        echo "a_s9xxx_sfe=${{ secrets.a_s9xxx_sfe }}"  >> $GITHUB_ENV
        echo "a_s9xxx_o=${{ secrets.a_s9xxx_o }}"  >> $GITHUB_ENV
        echo "dibao_sfe=${{ secrets.dibao_gdq_sfe }}"  >> $GITHUB_ENV
        echo "dibao_o=${{ secrets.dibao_gdq_o }}"  >> $GITHUB_ENV

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H")
        echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
        echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "DATE1=$(date "+%Y-%m-%d")" >> $GITHUB_ENV
#        echo "::set-env name=useVersionInfo::$useVersionInfo"
#        echo "::set-env name=DATE::$(date "+%Y-%m-%d %H:%M:%S")"

    - name: Download and organize files
      #if: steps.opwenwrtcache.outputs.cache-hit != 'true'
      run: |
        cd /opt
        sudo rm -rf Armbian_*
        wget $mk_scr
        #wget $a_beikeyun_sfe
        #wget $a_beikeyun_o
        wget $a_s9xxx_sfe
        wget $a_s9xxx_o        
        sudo tar xvzf *.tar.gz
        sudo mkdir imgs
        #sudo xz -d Armbian*Beike*\+\.img\.xz
        #sudo xz -d Armbian*Beike*\+o*
        sudo xz -d Armbian*Aml*\+\.img\.xz
        sudo xz -d Armbian*Aml*\+o*
        #sudo xz -d Armbian*L1*\+\.img\.xz
        #sudo xz -d Armbian*L1*\+o*
        sudo mv *.img imgs
        cd /opt/openwrt
        sudo rm -rf openwrt-armvirt-64-*
        sudo wget $dibao_sfe
        sudo mv openwrt-armvirt-64-default-rootfs.tar.gz sfe-openwrt-armvirt-64-default-rootfs.tar.gz
        sudo wget $dibao_o

    - name: autoVersion
      run: |
        cd /opt/openwrt
        chmod +x $GITHUB_WORKSPACE/$Update_Ver_SH
        sudo $GITHUB_WORKSPACE/$Update_Ver_SH

    - name: Check Files1
      run: |
        cd /opt/imgs
        ls

    - name: Check Files2
      run: |
        cd /opt/openwrt
        ls

    - name: Build firmware
      id: build
      run: |
        cd /opt/openwrt
        sudo chmod +x *.sh
        #sudo ./mk_beikeyun_opimg.sh
        #sudo ./mk_l1pro_opimg.sh
        sudo ./mk_n1_opimg.sh
        sudo ./mk_n1_opimg_sfe.sh
        #sudo ./mk_s905x3_opimg.sh
        #sudo ./mk_s905x3_opimg_sfe.sh
        #sudo ./mk_s922x_opimg.sh
        #sudo ./mk_s922x_opimg_sfe.sh
        #sudo ./n1-to-vplus.sh
        #sudo ./n1-to-vplus_sfe.sh
        echo "::set-output name=status::success"

    - name: copy update files
      run: |
        cd /opt/openwrt
        #sudo cp files/update-beikeyun-openwrt.sh tmp/z-update-beikeyun-openwrt.sh
        #sudo cp files/update-l1pro-openwrt.sh tmp/z-update-l1pro-openwrt.sh
        #sudo cp files/update-to-emmc.sh tmp/z-update-to-emmc.sh
        #sudo cp files/s905x3/update-s905x3-openwrt.sh tmp/z-update-s905x3-openwrt.sh
        #sudo cp files/s922x/update-s922x-openwrt.sh tmp/z-update-s922x-openwrt.sh
        #sudo cp files/update-vplus-openwrt.sh tmp/z-update-vplus-openwrt.sh

    - name: Check Files3
      run: |
        cd /opt/openwrt/tmp
        rename 's/N1/${{ env.DATE1 }}-gdq-N1/' N1*img
        ls

    - name: xz-z
      id: xz
      run: |
        sudo chmod  -R 777 /opt/openwrt/tmp
        cd /opt/openwrt/tmp
        sudo rm -rf *.xz
        sudo xz -z *.img
        #rename 's/N1/${{ env.DATE1 }}-gdq-N1/' N1*xz
        #sudo rm btld-rk3328.bin
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Check Files4
      run: |
        cd /opt/openwrt/tmp
        ls

    - name: Create release
      id: release
      uses: ncipollo/release-action@v1
      with:
        name: ${{ env.DATE }} Openwrt for N1
        allowUpdates: true
        tag: ${{ env.FILE_NAME }}
        commit: main
        token: ${{ secrets.RELEASES_TOKEN }}
        body: |
          ## 鉴于N1用户群庞大，特单独开此release
          默认IP：192.168.1.1 默认密码： password
          Openwrt🚀(注:+o版为flowoffload加速,+版为sfe加速)
        artifacts: ${{ env.FIRMWARE }}/*



  mini50: 
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804)
        sudo -E apt-get -qq install rename
        sudo -E apt-get -qq install time
        sudo -E apt-get -qq install sshpass
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        echo "mk_scr=${{ secrets.mk_scr }}"  >> $GITHUB_ENV
        #echo "a_beikeyun_sfe=${{ secrets.a_beikeyun_sfe }}"  >> $GITHUB_ENV
        echo "a_beikeyun_o=${{ secrets.a_beikeyun_o }}"  >> $GITHUB_ENV
        echo "a_s9xxx_sfe=${{ secrets.a_s9xxx_sfe }}"  >> $GITHUB_ENV
        echo "a_s9xxx_o=${{ secrets.a_s9xxx_o }}"  >> $GITHUB_ENV
        echo "dibao_sfe=${{ secrets.dibao_mini_sfe }}"  >> $GITHUB_ENV
        echo "dibao_o=${{ secrets.dibao_mini_o }}"  >> $GITHUB_ENV

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H")
        echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
        echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "DATE1=$(date "+%Y-%m-%d")" >> $GITHUB_ENV
#        echo "::set-env name=useVersionInfo::$useVersionInfo"
#        echo "::set-env name=DATE::$(date "+%Y-%m-%d %H:%M:%S")"

    - name: Download and organize files
      #if: steps.opwenwrtcache.outputs.cache-hit != 'true'
      run: |
        cd /opt
        sudo rm -rf Armbian_*
        wget $mk_scr
        #wget $a_beikeyun_sfe
        #wget $a_beikeyun_o
        wget $a_s9xxx_sfe
        wget $a_s9xxx_o        
        sudo tar xvzf *.tar.gz
        sudo mkdir imgs
        #sudo xz -d Armbian*Beike*\+\.img\.xz
        #sudo xz -d Armbian*Beike*\+o*
        sudo xz -d Armbian*Aml*\+\.img\.xz
        sudo xz -d Armbian*Aml*\+o*
        #sudo xz -d Armbian*L1*\+\.img\.xz
        #sudo xz -d Armbian*L1*\+o*
        sudo mv *.img imgs
        cd /opt/openwrt
        sudo rm -rf openwrt-armvirt-64-*
        sudo wget $dibao_sfe
        sudo mv openwrt-armvirt-64-default-rootfs.tar.gz sfe-openwrt-armvirt-64-default-rootfs.tar.gz
        sudo wget $dibao_o

    - name: autoVersion
      run: |
        cd /opt/openwrt
        chmod +x $GITHUB_WORKSPACE/$Update_Ver_SH
        sudo $GITHUB_WORKSPACE/$Update_Ver_SH

    - name: Check Files1
      run: |
        cd /opt/imgs
        ls

    - name: Check Files2
      run: |
        cd /opt/openwrt
        ls

    - name: Build firmware
      id: build
      run: |
        cd /opt/openwrt
        sudo chmod +x *.sh
        #sudo ./mk_beikeyun_opimg.sh
        #sudo ./mk_l1pro_opimg.sh
        sudo ./mk_n1_opimg.sh
        sudo ./mk_n1_opimg_sfe.sh
        #sudo ./mk_s905x3_opimg.sh
        #sudo ./mk_s905x3_opimg_sfe.sh
        #sudo ./mk_s922x_opimg.sh
        #sudo ./mk_s922x_opimg_sfe.sh
        #sudo ./n1-to-vplus.sh
        #sudo ./n1-to-vplus_sfe.sh
        echo "::set-output name=status::success"

    - name: copy update files
      run: |
        cd /opt/openwrt
        #sudo cp files/update-beikeyun-openwrt.sh tmp/z-update-beikeyun-openwrt.sh
        #sudo cp files/update-l1pro-openwrt.sh tmp/z-update-l1pro-openwrt.sh
        #sudo cp files/update-to-emmc.sh tmp/z-update-to-emmc.sh
        #sudo cp files/s905x3/update-s905x3-openwrt.sh tmp/z-update-s905x3-openwrt.sh
        #sudo cp files/s922x/update-s922x-openwrt.sh tmp/z-update-s922x-openwrt.sh
        #sudo cp files/update-vplus-openwrt.sh tmp/z-update-vplus-openwrt.sh

    - name: Check Files3
      run: |
        cd /opt/openwrt/tmp
        rename 's/N1/${{ env.DATE1 }}-mini-N1/' N1*img
        ls

    - name: xz-z
      id: xz
      run: |
        sudo chmod  -R 777 /opt/openwrt/tmp
        cd /opt/openwrt/tmp
        sudo rm -rf *.xz
        sudo xz -z *.img
        #sudo rm btld-rk3328.bin
        #rename 's/N1/${{ env.DATE1 }}-mini-N1/' N1*xz
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Check Files4
      run: |
        cd /opt/openwrt/tmp
        ls

    - name: Create release
      id: release
      uses: ncipollo/release-action@v1
      with:
        name: ${{ env.DATE }} Openwrt for N1
        allowUpdates: true
        tag: ${{ env.FILE_NAME }}
        commit: main
        token: ${{ secrets.RELEASES_TOKEN }}
        body: |
          ## 鉴于N1用户群庞大，特单独开此release
          默认IP：192.168.1.1 默认密码： password
          Openwrt🚀(注:+o版为flowoffload加速,+版为sfe加速)
        artifacts: ${{ env.FIRMWARE }}/*



  over:
    needs: [gdq, mini, gdq50, mini50]
    runs-on: ubuntu-18.04
    steps:
    #- name: WeChat notification #微信推送
    #  run: curl https://sc.ftqq.com/${{ secrets.ServerChan }}.send?text=N1打包成功
    - name: TG notification #TG推送
      run: curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&text=N1打包成功"